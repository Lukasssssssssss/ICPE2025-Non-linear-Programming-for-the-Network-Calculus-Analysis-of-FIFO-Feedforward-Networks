package org.networkcalculus.dnc.optree.nodes;

import org.networkcalculus.dnc.network.server_graph.Flow;
import org.networkcalculus.dnc.optree.plugins.BinOperatorPlugin;
import org.networkcalculus.dnc.optree.symbolic.SymbolicTerm;

public class OpTFlowNode extends OpTContentNode {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //attributes
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private Flow flow;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //constructors
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public OpTFlowNode(Flow flow){
        super();
        this.flow = flow;
    }

    public OpTFlowNode(Flow flow, OpTOperatorNode child){
        super(child);
        this.flow = flow;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //methods
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public Flow getFlow(){
        return this.flow;
    }


    @Override
    protected String getContentString() {
        return "Flow = " + this.flow.getId();
    }

    @Override
    protected SymbolicTerm deriveSymbolicTermFromLeaf(BinOperatorPlugin plugin) {
        return plugin.computeSymbolicTerm(this.getFlow());
    }
}
